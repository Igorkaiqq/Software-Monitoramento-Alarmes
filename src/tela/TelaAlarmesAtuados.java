/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package tela;
import connection.Conexao.rs;
import controller.ControllerEquipamento;
import controller.ControllerAlarme;
import controller.ControllerAlarmeAtuado;
import dao.DAOAlarme;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import model.ModelEquipamento;
import model.ModelAlarme;
import util.Datas;
import util.Formatador;
import java.math.RoundingMode;
import java.sql.Date;
import java.text.DecimalFormat;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellRenderer;
import model.ModelAlarmeAtuado;
/**
 *
 * @author igork
 */
public class TelaAlarmesAtuados extends javax.swing.JFrame {
    ArrayList<ModelEquipamento> listaModelEquipamento = new ArrayList<>();
    ArrayList<ModelAlarme> listaModelAlarme = new ArrayList<>();
    ArrayList<ModelAlarmeAtuado> listaModelAlarmeAtuado = new ArrayList<>();
    ControllerEquipamento controllerEquipamento = new ControllerEquipamento();
    ControllerAlarme controllerAlarme = new ControllerAlarme();
    ControllerAlarmeAtuado controllerAlarmeAtuado = new ControllerAlarmeAtuado();
    ModelEquipamento modelEquipamento = new ModelEquipamento();
    ModelAlarme modelAlarme = new ModelAlarme();
    ModelAlarmeAtuado modelAlarmeAtuado = new ModelAlarmeAtuado();
    Datas datas = new Datas();
    
    
    /**
     * Creates new form TelaDesativar
     */
    public TelaAlarmesAtuados() {//Aqui puxo as funções iniciais da tela
        initComponents();
        carregarAlarmesAtuados();
        setLocationRelativeTo(null);
        centralizarColunas();
        bloquearColunas();
        DefaultTableModel modeloo = (DefaultTableModel) jtAlarmeAtuado.getModel();
        jtAlarmeAtuado.setRowSorter(new TableRowSorter(modeloo));
        jtAlarmeAtuado.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }
    
    private void carregarAlarmesAtuados(){ //carrega todos os alarmes que já foram ativos no banco de dados
        listaModelAlarmeAtuado = controllerAlarmeAtuado.getListaAlarmeAtuadoController();

        DefaultTableModel model = (DefaultTableModel) jtAlarmeAtuado.getModel();
        model.setNumRows(0); 
        int contador = listaModelAlarmeAtuado.size();
        for (int i = 0; i < contador; i++) {
            model.addRow(new Object[]{
                listaModelAlarmeAtuado.get(i).getPk_id_alarmeAtuado(), 
                listaModelAlarmeAtuado.get(i).getFk_fk_equipamento(),
                listaModelAlarmeAtuado.get(i).getFk_fk_alarme(),
                listaModelAlarmeAtuado.get(i).getData_entrada(),
                listaModelAlarmeAtuado.get(i).getData_saida(),
                listaModelAlarmeAtuado.get(i).getAlarme_status(),
            });
            
        }
}    
       
    private void centralizarColunas(){//Centraliza o texto das colunas
        DefaultTableCellRenderer centralizado = new DefaultTableCellRenderer();        
        centralizado.setHorizontalAlignment(SwingConstants.CENTER);
        jtAlarmeAtuado.getColumnModel().getColumn(0).setCellRenderer(centralizado);
        jtAlarmeAtuado.getColumnModel().getColumn(1).setCellRenderer(centralizado);
        jtAlarmeAtuado.getColumnModel().getColumn(2).setCellRenderer(centralizado);
        jtAlarmeAtuado.getColumnModel().getColumn(3).setCellRenderer(centralizado);
        jtAlarmeAtuado.getColumnModel().getColumn(4).setCellRenderer(centralizado);
        jtAlarmeAtuado.getColumnModel().getColumn(5).setCellRenderer(centralizado);
    ((DefaultTableCellRenderer) jtAlarmeAtuado.getTableHeader().getDefaultRenderer()).setHorizontalAlignment(SwingConstants.CENTER);
    }
    
    private void bloquearColunas(){//Impede do usuario redimensionar/mover as colunas
         jtAlarmeAtuado.getTableHeader().setReorderingAllowed (false);  
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jtAlarmeAtuado = new javax.swing.JTable();
        jbDesativar = new javax.swing.JButton();
        jcOnOff = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jbAlarmeVoltar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jtAlarmeAtuado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "AlarmeAtuado", "Equipamento", "Alarme", "Data de entrada", "Data de saida", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jtAlarmeAtuado);
        if (jtAlarmeAtuado.getColumnModel().getColumnCount() > 0) {
            jtAlarmeAtuado.getColumnModel().getColumn(0).setResizable(false);
        }

        jbDesativar.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jbDesativar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/32x32/desabilitar.png"))); // NOI18N
        jbDesativar.setText("Desativar");
        jbDesativar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDesativarActionPerformed(evt);
            }
        });

        jcOnOff.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "On", "Off" }));
        jcOnOff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcOnOffActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setText("Filtrar alarmes:");

        jbAlarmeVoltar.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jbAlarmeVoltar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/24x24/de-volta (1).png"))); // NOI18N
        jbAlarmeVoltar.setText("Voltar");
        jbAlarmeVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAlarmeVoltarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(jbAlarmeVoltar)
                .addGap(198, 198, 198)
                .addComponent(jbDesativar, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jcOnOff, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(326, 326, 326))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 850, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jcOnOff, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbDesativar, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbAlarmeVoltar))
                .addGap(24, 24, 24))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    //desativar alarmes
    private void jbDesativarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDesativarActionPerformed
        // TODO add your handling code here:
        int linhaSelecionada = this.jtAlarmeAtuado.getSelectedRow(); //Linha que está selecionada na tabela
        Date dataentrada = (Date) this.jtAlarmeAtuado.getValueAt(linhaSelecionada, 3);//Pegando a data de entrada do alarme atuado selecionado
        int codigoAlarmeAtuado = (int) this.jtAlarmeAtuado.getValueAt(linhaSelecionada, 0);//Pegando o id do Alarme Atuado
        modelAlarmeAtuado = controllerAlarmeAtuado.getAlarmeAtuadoController(codigoAlarmeAtuado);
        String onOff = (String) this.jtAlarmeAtuado.getValueAt(linhaSelecionada, 5);
        
        if (onOff.equalsIgnoreCase("Off")) { //Verifica se o alarme já está desativado
        JOptionPane.showMessageDialog(this, "O alarme já está desativado.");   
        } else {
         try { //Setando a data de desativamento do alarme no banco de dados
            modelAlarmeAtuado.setData_saida(datas.converterDataParaDateUS(new java.util.Date(System.currentTimeMillis())));
        } catch (Exception ex) {
        }
        try {
            modelAlarmeAtuado.setData_entrada(dataentrada);
            modelAlarmeAtuado.setAlarme_status("Off"); //Desligando o alarme
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, " Erro ao Desativar o Alarme.");
        }
        if (controllerAlarmeAtuado.atualizarAlarmeAtuadoController(modelAlarmeAtuado)) {
            JOptionPane.showMessageDialog(this, " O Alarme foi desativado com sucesso.");

            carregarAlarmesAtuados();

        }else{
            JOptionPane.showMessageDialog(this, " Erro ao desativar o Alarme.");
        }   
        }
        
        
    }//GEN-LAST:event_jbDesativarActionPerformed

    //Filtro da tabela para mostrar somentes os Off/On
    private void jcOnOffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcOnOffActionPerformed
        // TODO add your handling code here:
        DefaultTableModel modelo = (DefaultTableModel) this.jtAlarmeAtuado.getModel();
        final TableRowSorter<TableModel> classificador = new TableRowSorter<>(modelo);
        this.jtAlarmeAtuado.setRowSorter(classificador);
        String textoPesquisado = (String) jcOnOff.getSelectedItem();
        classificador.setRowFilter(RowFilter.regexFilter(textoPesquisado, 5));
    }//GEN-LAST:event_jcOnOffActionPerformed

    private void jbAlarmeVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAlarmeVoltarActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jbAlarmeVoltarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaAlarmesAtuados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaAlarmesAtuados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaAlarmesAtuados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaAlarmesAtuados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaAlarmesAtuados().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbAlarmeVoltar;
    private javax.swing.JButton jbDesativar;
    private javax.swing.JComboBox<String> jcOnOff;
    private javax.swing.JTable jtAlarmeAtuado;
    // End of variables declaration//GEN-END:variables
}
