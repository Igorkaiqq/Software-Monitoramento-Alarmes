/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package tela;
import connection.Conexao.rs;
import controller.ControllerEquipamento;
import controller.ControllerAlarme;
import controller.ControllerAlarmeAtuado;
import dao.DAOAlarme;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import model.ModelEquipamento;
import model.ModelAlarme;
import util.Datas;
import util.Formatador;
import java.math.RoundingMode;
import java.sql.Date;
import java.text.DecimalFormat;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import model.ModelAlarmeAtuado;

/**
 *
 * @author igork
 */
public class TelaAlarmesAtivar extends javax.swing.JFrame {

    private static void validade() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    ArrayList<ModelEquipamento> listaModelEquipamento = new ArrayList<>();
    ArrayList<ModelAlarme> listaModelAlarme = new ArrayList<>();
    ArrayList<ModelAlarmeAtuado> listaModelAlarmeAtuado = new ArrayList<>();
    ControllerEquipamento controllerEquipamento = new ControllerEquipamento();
    ControllerAlarme controllerAlarme = new ControllerAlarme();
    ControllerAlarmeAtuado controllerAlarmeAtuado = new ControllerAlarmeAtuado();
    ModelEquipamento modelEquipamento = new ModelEquipamento();
    ModelAlarme modelAlarme = new ModelAlarme();
    ModelAlarmeAtuado modelAlarmeAtuado = new ModelAlarmeAtuado();
    Datas datas = new Datas();
    String ativarDesativar;
    /**
     * Creates new form TelaAlarmesAtuados
     */
    //Chamando as funções iniciais do sistema
    public TelaAlarmesAtivar() {
        initComponents();
        carregarAlarmes();
        bloquearColunas();
        centralizarColunas();
        setLocationRelativeTo(null);
        jtAlarmeTabela.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }
    
    private void centralizarColunas(){//Centraliza o texto das colunas
        DefaultTableCellRenderer centralizado = new DefaultTableCellRenderer();        
        centralizado.setHorizontalAlignment(SwingConstants.CENTER);
        jtAlarmeTabela.getColumnModel().getColumn(0).setCellRenderer(centralizado);
        jtAlarmeTabela.getColumnModel().getColumn(1).setCellRenderer(centralizado);
        jtAlarmeTabela.getColumnModel().getColumn(2).setCellRenderer(centralizado);
        jtAlarmeTabela.getColumnModel().getColumn(3).setCellRenderer(centralizado);
    ((DefaultTableCellRenderer) jtAlarmeTabela.getTableHeader().getDefaultRenderer()).setHorizontalAlignment(SwingConstants.CENTER);
    }
    
       private void bloquearColunas(){//Impede do usuario redimensionar/mover as colunas
      jtAlarmeTabela.getTableHeader().setReorderingAllowed (false);  
    }
    
     private void carregarAlarmes(){//carregando os alarmes na tabela
        listaModelAlarme = controllerAlarme.getListaAlarmeController();
        listaModelEquipamento = controllerEquipamento.getListaEquipamentoController();
        DefaultTableModel model = (DefaultTableModel) jtAlarmeTabela.getModel();
        model.setNumRows(0); 
        int contador = listaModelAlarme.size();
        for (int i = 0; i < contador; i++) {
            model.addRow(new Object[]{
                listaModelEquipamento.get(listaModelAlarme.get(i).getFk_equipamento()).getEquipamento_nome(),
                listaModelAlarme.get(i).getIdAlarme(), 
                listaModelAlarme.get(i).getAlarme_descricao(),  
                listaModelAlarme.get(i).getAlarme_classificao(),
               
            });
            
        }
        
    }
    
    
     
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbAtivar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtAlarmeTabela = new javax.swing.JTable();
        jbAlarmeVoltar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jbAtivar.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jbAtivar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/32x32/verificar.png"))); // NOI18N
        jbAtivar.setText("Ativar");
        jbAtivar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAtivarActionPerformed(evt);
            }
        });

        jtAlarmeTabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Equipamento", "idAlarme", "Descrição Alarme", "Classificação"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jtAlarmeTabela);

        jbAlarmeVoltar.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jbAlarmeVoltar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/24x24/de-volta (1).png"))); // NOI18N
        jbAlarmeVoltar.setText("Voltar");
        jbAlarmeVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAlarmeVoltarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jbAlarmeVoltar)
                        .addGap(259, 259, 259)
                        .addComponent(jbAtivar))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 850, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbAtivar)
                    .addComponent(jbAlarmeVoltar))
                .addGap(30, 30, 30))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //ativando o alarme
    private void jbAtivarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAtivarActionPerformed
        // TODO add your handling code here:
        listaModelAlarmeAtuado = controllerAlarmeAtuado.getListaAlarmeAtuadoController();//pegando a lista dos alarmes Atuados
        int contador = listaModelAlarmeAtuado.size();//Pegando o tamanho da lista dos alarmes Atuados
        int linhaSelecionada = this.jtAlarmeTabela.getSelectedRow();//Salvando o numero da linha selecionada
        int codAlarmVerif = (int) this.jtAlarmeTabela.getValueAt(linhaSelecionada, 1); //pega o cod do alarme
        int codAlarmAt = (int) this.modelAlarmeAtuado.getFk_fk_alarme();//pegando o codigo do alarme atuado para usar no IF logo abaixo
        int vOn = 0;//Variavel vOn "Verifica ON"
        
        for (int i = 0; i < listaModelAlarmeAtuado.size(); i++) {
            int codAlarm = listaModelAlarmeAtuado.get(i).getFk_fk_alarme();
            String stAlarm = listaModelAlarmeAtuado.get(i).getAlarme_status();
            if (codAlarmVerif==codAlarm && stAlarm.equalsIgnoreCase("On")) {
                vOn++;
            }    
        }
        
        if (vOn>0) {
           JOptionPane.showMessageDialog(this, " O Alarme já está ativo");
           
            } else {
                try {
            modelAlarmeAtuado.setData_entrada(datas.converterDataParaDateUS(new java.util.Date(System.currentTimeMillis())));
                } catch (Exception ex) {
            }
                try {
            int codigoEquipamento = (int) this.jtAlarmeTabela.getValueAt(linhaSelecionada, 0);
            modelEquipamento = controllerEquipamento.getEquipamentoController(codigoEquipamento);
            int codigoAlarme = (int) this.jtAlarmeTabela.getValueAt(linhaSelecionada, 1);
            modelAlarme = controllerAlarme.getAlarmeController(codigoAlarme);
            modelAlarmeAtuado.setFk_fk_alarme((modelAlarme.getIdAlarme()));
            modelAlarmeAtuado.setFk_fk_equipamento((modelAlarme.getFk_equipamento()));
            modelAlarmeAtuado.setAlarme_status("On");
            this.dispose();//Fiz isso aqui para fechar a tela de ativar os alarmes para poder solucionar um bug que estava ocorrendo e não consegui resolver
                } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Erro");    
                }   
            }
 
        if (controllerAlarmeAtuado.salvarAlarmeAtuadoOnController(modelAlarmeAtuado)>0) {
            JOptionPane.showMessageDialog(this, " O Alarme foi ativado com sucesso.");

            
        }else{
            
        }
    }//GEN-LAST:event_jbAtivarActionPerformed

    
    
    private void jbAlarmeVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAlarmeVoltarActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jbAlarmeVoltarActionPerformed

    public void ativarAlarme(){
        ativarDesativar = "Ativar";
        int linhaSelecionada = this.jtAlarmeTabela.getSelectedRow();
        try {
            modelAlarmeAtuado.setData_entrada(datas.converterDataParaDateUS(new java.util.Date(System.currentTimeMillis())));
        } catch (Exception ex) {
        }
        modelAlarmeAtuado.setFk_fk_alarme((modelAlarme.getIdAlarme()));
        modelAlarmeAtuado.setFk_fk_equipamento((modelAlarme.getFk_equipamento()));
        modelAlarmeAtuado.setAlarme_status("On");
        if (controllerAlarme.salvarAlarmeController(modelAlarme)>0) {
            JOptionPane.showMessageDialog(this, " O Alarme foi ativado com sucesso.");
        
            carregarAlarmes();
            
        }else{
            JOptionPane.showMessageDialog(this, " Erro ao ativar o Alarme.");
        }
    }
    
    public void desativarAlarme(){
        
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaAlarmesAtivar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaAlarmesAtivar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaAlarmesAtivar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaAlarmesAtivar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaAlarmesAtivar().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbAlarmeVoltar;
    private javax.swing.JButton jbAtivar;
    private javax.swing.JTable jtAlarmeTabela;
    // End of variables declaration//GEN-END:variables
}
